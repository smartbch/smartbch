package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CCContext) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IsPaused":
			z.IsPaused, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsPaused")
				return
			}
		case "RescanTime":
			z.RescanTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "RescanTime")
				return
			}
		case "RescanHeight":
			z.RescanHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "RescanHeight")
				return
			}
		case "LastRescannedHeight":
			z.LastRescannedHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "LastRescannedHeight")
				return
			}
		case "UTXOAlreadyHandle":
			z.UTXOAlreadyHandle, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "UTXOAlreadyHandle")
				return
			}
		case "TotalBurntOnMainChain":
			err = dc.ReadExactBytes((z.TotalBurntOnMainChain)[:])
			if err != nil {
				err = msgp.WrapError(err, "TotalBurntOnMainChain")
				return
			}
		case "PendingBurning":
			err = dc.ReadExactBytes((z.PendingBurning)[:])
			if err != nil {
				err = msgp.WrapError(err, "PendingBurning")
				return
			}
		case "LastCovenantAddr":
			err = dc.ReadExactBytes((z.LastCovenantAddr)[:])
			if err != nil {
				err = msgp.WrapError(err, "LastCovenantAddr")
				return
			}
		case "CurrCovenantAddr":
			err = dc.ReadExactBytes((z.CurrCovenantAddr)[:])
			if err != nil {
				err = msgp.WrapError(err, "CurrCovenantAddr")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CCContext) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "IsPaused"
	err = en.Append(0x89, 0xa8, 0x49, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsPaused)
	if err != nil {
		err = msgp.WrapError(err, "IsPaused")
		return
	}
	// write "RescanTime"
	err = en.Append(0xaa, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.RescanTime)
	if err != nil {
		err = msgp.WrapError(err, "RescanTime")
		return
	}
	// write "RescanHeight"
	err = en.Append(0xac, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.RescanHeight)
	if err != nil {
		err = msgp.WrapError(err, "RescanHeight")
		return
	}
	// write "LastRescannedHeight"
	err = en.Append(0xb3, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.LastRescannedHeight)
	if err != nil {
		err = msgp.WrapError(err, "LastRescannedHeight")
		return
	}
	// write "UTXOAlreadyHandle"
	err = en.Append(0xb1, 0x55, 0x54, 0x58, 0x4f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.UTXOAlreadyHandle)
	if err != nil {
		err = msgp.WrapError(err, "UTXOAlreadyHandle")
		return
	}
	// write "TotalBurntOnMainChain"
	err = en.Append(0xb5, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x72, 0x6e, 0x74, 0x4f, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.TotalBurntOnMainChain)[:])
	if err != nil {
		err = msgp.WrapError(err, "TotalBurntOnMainChain")
		return
	}
	// write "PendingBurning"
	err = en.Append(0xae, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.PendingBurning)[:])
	if err != nil {
		err = msgp.WrapError(err, "PendingBurning")
		return
	}
	// write "LastCovenantAddr"
	err = en.Append(0xb0, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.LastCovenantAddr)[:])
	if err != nil {
		err = msgp.WrapError(err, "LastCovenantAddr")
		return
	}
	// write "CurrCovenantAddr"
	err = en.Append(0xb0, 0x43, 0x75, 0x72, 0x72, 0x43, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.CurrCovenantAddr)[:])
	if err != nil {
		err = msgp.WrapError(err, "CurrCovenantAddr")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CCContext) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "IsPaused"
	o = append(o, 0x89, 0xa8, 0x49, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64)
	o = msgp.AppendBool(o, z.IsPaused)
	// string "RescanTime"
	o = append(o, 0xaa, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.RescanTime)
	// string "RescanHeight"
	o = append(o, 0xac, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.RescanHeight)
	// string "LastRescannedHeight"
	o = append(o, 0xb3, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.LastRescannedHeight)
	// string "UTXOAlreadyHandle"
	o = append(o, 0xb1, 0x55, 0x54, 0x58, 0x4f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65)
	o = msgp.AppendBool(o, z.UTXOAlreadyHandle)
	// string "TotalBurntOnMainChain"
	o = append(o, 0xb5, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x72, 0x6e, 0x74, 0x4f, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e)
	o = msgp.AppendBytes(o, (z.TotalBurntOnMainChain)[:])
	// string "PendingBurning"
	o = append(o, 0xae, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67)
	o = msgp.AppendBytes(o, (z.PendingBurning)[:])
	// string "LastCovenantAddr"
	o = append(o, 0xb0, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendBytes(o, (z.LastCovenantAddr)[:])
	// string "CurrCovenantAddr"
	o = append(o, 0xb0, 0x43, 0x75, 0x72, 0x72, 0x43, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendBytes(o, (z.CurrCovenantAddr)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CCContext) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IsPaused":
			z.IsPaused, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsPaused")
				return
			}
		case "RescanTime":
			z.RescanTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RescanTime")
				return
			}
		case "RescanHeight":
			z.RescanHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RescanHeight")
				return
			}
		case "LastRescannedHeight":
			z.LastRescannedHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastRescannedHeight")
				return
			}
		case "UTXOAlreadyHandle":
			z.UTXOAlreadyHandle, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UTXOAlreadyHandle")
				return
			}
		case "TotalBurntOnMainChain":
			bts, err = msgp.ReadExactBytes(bts, (z.TotalBurntOnMainChain)[:])
			if err != nil {
				err = msgp.WrapError(err, "TotalBurntOnMainChain")
				return
			}
		case "PendingBurning":
			bts, err = msgp.ReadExactBytes(bts, (z.PendingBurning)[:])
			if err != nil {
				err = msgp.WrapError(err, "PendingBurning")
				return
			}
		case "LastCovenantAddr":
			bts, err = msgp.ReadExactBytes(bts, (z.LastCovenantAddr)[:])
			if err != nil {
				err = msgp.WrapError(err, "LastCovenantAddr")
				return
			}
		case "CurrCovenantAddr":
			bts, err = msgp.ReadExactBytes(bts, (z.CurrCovenantAddr)[:])
			if err != nil {
				err = msgp.WrapError(err, "CurrCovenantAddr")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CCContext) Msgsize() (s int) {
	s = 1 + 9 + msgp.BoolSize + 11 + msgp.Int64Size + 13 + msgp.Uint64Size + 20 + msgp.Uint64Size + 18 + msgp.BoolSize + 22 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 15 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 17 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 17 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CCTransferInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			{
				var zb0002 byte
				zb0002, err = dc.ReadByte()
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = UTXOType(zb0002)
			}
		case "PrevUTXO":
			err = z.PrevUTXO.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "PrevUTXO")
				return
			}
		case "UTXO":
			err = z.UTXO.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "UTXO")
				return
			}
		case "Receiver":
			err = dc.ReadExactBytes((z.Receiver)[:])
			if err != nil {
				err = msgp.WrapError(err, "Receiver")
				return
			}
		case "CovenantAddress":
			err = dc.ReadExactBytes((z.CovenantAddress)[:])
			if err != nil {
				err = msgp.WrapError(err, "CovenantAddress")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CCTransferInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Type"
	err = en.Append(0x85, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteByte(byte(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "PrevUTXO"
	err = en.Append(0xa8, 0x50, 0x72, 0x65, 0x76, 0x55, 0x54, 0x58, 0x4f)
	if err != nil {
		return
	}
	err = z.PrevUTXO.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PrevUTXO")
		return
	}
	// write "UTXO"
	err = en.Append(0xa4, 0x55, 0x54, 0x58, 0x4f)
	if err != nil {
		return
	}
	err = z.UTXO.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "UTXO")
		return
	}
	// write "Receiver"
	err = en.Append(0xa8, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Receiver)[:])
	if err != nil {
		err = msgp.WrapError(err, "Receiver")
		return
	}
	// write "CovenantAddress"
	err = en.Append(0xaf, 0x43, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.CovenantAddress)[:])
	if err != nil {
		err = msgp.WrapError(err, "CovenantAddress")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CCTransferInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Type"
	o = append(o, 0x85, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendByte(o, byte(z.Type))
	// string "PrevUTXO"
	o = append(o, 0xa8, 0x50, 0x72, 0x65, 0x76, 0x55, 0x54, 0x58, 0x4f)
	o, err = z.PrevUTXO.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PrevUTXO")
		return
	}
	// string "UTXO"
	o = append(o, 0xa4, 0x55, 0x54, 0x58, 0x4f)
	o, err = z.UTXO.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "UTXO")
		return
	}
	// string "Receiver"
	o = append(o, 0xa8, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72)
	o = msgp.AppendBytes(o, (z.Receiver)[:])
	// string "CovenantAddress"
	o = append(o, 0xaf, 0x43, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendBytes(o, (z.CovenantAddress)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CCTransferInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			{
				var zb0002 byte
				zb0002, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = UTXOType(zb0002)
			}
		case "PrevUTXO":
			bts, err = z.PrevUTXO.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrevUTXO")
				return
			}
		case "UTXO":
			bts, err = z.UTXO.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "UTXO")
				return
			}
		case "Receiver":
			bts, err = msgp.ReadExactBytes(bts, (z.Receiver)[:])
			if err != nil {
				err = msgp.WrapError(err, "Receiver")
				return
			}
		case "CovenantAddress":
			bts, err = msgp.ReadExactBytes(bts, (z.CovenantAddress)[:])
			if err != nil {
				err = msgp.WrapError(err, "CovenantAddress")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CCTransferInfo) Msgsize() (s int) {
	s = 1 + 5 + msgp.ByteSize + 9 + z.PrevUTXO.Msgsize() + 5 + z.UTXO.Msgsize() + 9 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 16 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SourceType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SourceType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SourceType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SourceType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SourceType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SourceType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SourceType) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UTXO) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TxID":
			err = dc.ReadExactBytes((z.TxID)[:])
			if err != nil {
				err = msgp.WrapError(err, "TxID")
				return
			}
		case "Index":
			z.Index, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Amount":
			err = dc.ReadExactBytes((z.Amount)[:])
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UTXO) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "TxID"
	err = en.Append(0x83, 0xa4, 0x54, 0x78, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.TxID)[:])
	if err != nil {
		err = msgp.WrapError(err, "TxID")
		return
	}
	// write "Index"
	err = en.Append(0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Index)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	// write "Amount"
	err = en.Append(0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Amount)[:])
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UTXO) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "TxID"
	o = append(o, 0x83, 0xa4, 0x54, 0x78, 0x49, 0x44)
	o = msgp.AppendBytes(o, (z.TxID)[:])
	// string "Index"
	o = append(o, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint32(o, z.Index)
	// string "Amount"
	o = append(o, 0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendBytes(o, (z.Amount)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UTXO) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TxID":
			bts, err = msgp.ReadExactBytes(bts, (z.TxID)[:])
			if err != nil {
				err = msgp.WrapError(err, "TxID")
				return
			}
		case "Index":
			z.Index, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Amount":
			bts, err = msgp.ReadExactBytes(bts, (z.Amount)[:])
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UTXO) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 6 + msgp.Uint32Size + 7 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UTXOParam) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 byte
		zb0001, err = dc.ReadByte()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = UTXOParam(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z UTXOParam) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteByte(byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z UTXOParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UTXOParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 byte
		zb0001, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = UTXOParam(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z UTXOParam) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UTXORecord) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OwnerOfLost":
			err = dc.ReadExactBytes((z.OwnerOfLost)[:])
			if err != nil {
				err = msgp.WrapError(err, "OwnerOfLost")
				return
			}
		case "CovenantAddr":
			err = dc.ReadExactBytes((z.CovenantAddr)[:])
			if err != nil {
				err = msgp.WrapError(err, "CovenantAddr")
				return
			}
		case "IsRedeemed":
			z.IsRedeemed, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsRedeemed")
				return
			}
		case "RedeemTarget":
			err = dc.ReadExactBytes((z.RedeemTarget)[:])
			if err != nil {
				err = msgp.WrapError(err, "RedeemTarget")
				return
			}
		case "ExpectedSignTime":
			z.ExpectedSignTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ExpectedSignTime")
				return
			}
		case "Txid":
			err = dc.ReadExactBytes((z.Txid)[:])
			if err != nil {
				err = msgp.WrapError(err, "Txid")
				return
			}
		case "Index":
			z.Index, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Amount":
			err = dc.ReadExactBytes((z.Amount)[:])
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UTXORecord) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "OwnerOfLost"
	err = en.Append(0x88, 0xab, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.OwnerOfLost)[:])
	if err != nil {
		err = msgp.WrapError(err, "OwnerOfLost")
		return
	}
	// write "CovenantAddr"
	err = en.Append(0xac, 0x43, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.CovenantAddr)[:])
	if err != nil {
		err = msgp.WrapError(err, "CovenantAddr")
		return
	}
	// write "IsRedeemed"
	err = en.Append(0xaa, 0x49, 0x73, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsRedeemed)
	if err != nil {
		err = msgp.WrapError(err, "IsRedeemed")
		return
	}
	// write "RedeemTarget"
	err = en.Append(0xac, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.RedeemTarget)[:])
	if err != nil {
		err = msgp.WrapError(err, "RedeemTarget")
		return
	}
	// write "ExpectedSignTime"
	err = en.Append(0xb0, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ExpectedSignTime)
	if err != nil {
		err = msgp.WrapError(err, "ExpectedSignTime")
		return
	}
	// write "Txid"
	err = en.Append(0xa4, 0x54, 0x78, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Txid)[:])
	if err != nil {
		err = msgp.WrapError(err, "Txid")
		return
	}
	// write "Index"
	err = en.Append(0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Index)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	// write "Amount"
	err = en.Append(0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Amount)[:])
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UTXORecord) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "OwnerOfLost"
	o = append(o, 0x88, 0xab, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x6f, 0x73, 0x74)
	o = msgp.AppendBytes(o, (z.OwnerOfLost)[:])
	// string "CovenantAddr"
	o = append(o, 0xac, 0x43, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendBytes(o, (z.CovenantAddr)[:])
	// string "IsRedeemed"
	o = append(o, 0xaa, 0x49, 0x73, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64)
	o = msgp.AppendBool(o, z.IsRedeemed)
	// string "RedeemTarget"
	o = append(o, 0xac, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74)
	o = msgp.AppendBytes(o, (z.RedeemTarget)[:])
	// string "ExpectedSignTime"
	o = append(o, 0xb0, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.ExpectedSignTime)
	// string "Txid"
	o = append(o, 0xa4, 0x54, 0x78, 0x69, 0x64)
	o = msgp.AppendBytes(o, (z.Txid)[:])
	// string "Index"
	o = append(o, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint32(o, z.Index)
	// string "Amount"
	o = append(o, 0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendBytes(o, (z.Amount)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UTXORecord) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OwnerOfLost":
			bts, err = msgp.ReadExactBytes(bts, (z.OwnerOfLost)[:])
			if err != nil {
				err = msgp.WrapError(err, "OwnerOfLost")
				return
			}
		case "CovenantAddr":
			bts, err = msgp.ReadExactBytes(bts, (z.CovenantAddr)[:])
			if err != nil {
				err = msgp.WrapError(err, "CovenantAddr")
				return
			}
		case "IsRedeemed":
			z.IsRedeemed, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsRedeemed")
				return
			}
		case "RedeemTarget":
			bts, err = msgp.ReadExactBytes(bts, (z.RedeemTarget)[:])
			if err != nil {
				err = msgp.WrapError(err, "RedeemTarget")
				return
			}
		case "ExpectedSignTime":
			z.ExpectedSignTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpectedSignTime")
				return
			}
		case "Txid":
			bts, err = msgp.ReadExactBytes(bts, (z.Txid)[:])
			if err != nil {
				err = msgp.WrapError(err, "Txid")
				return
			}
		case "Index":
			z.Index, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Amount":
			bts, err = msgp.ReadExactBytes(bts, (z.Amount)[:])
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UTXORecord) Msgsize() (s int) {
	s = 1 + 12 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 13 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 11 + msgp.BoolSize + 13 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 17 + msgp.Int64Size + 5 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 6 + msgp.Uint32Size + 7 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UTXOType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 byte
		zb0001, err = dc.ReadByte()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = UTXOType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z UTXOType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteByte(byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z UTXOType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UTXOType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 byte
		zb0001, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = UTXOType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z UTXOType) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}
