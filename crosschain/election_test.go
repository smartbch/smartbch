package crosschain_test

import (
	"encoding/hex"
	"fmt"
	"math/big"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/tendermint/tendermint/libs/log"

	"github.com/smartbch/smartbch/crosschain"
	"github.com/smartbch/smartbch/internal/ethutils"
	"github.com/smartbch/smartbch/internal/testutils"
	"github.com/smartbch/smartbch/param"
)

const (
	// CCOperatorsGovForStorageTest.sol
	operatorsGovBytecode = ``

	// CCMonitorsGovForStorageTest.sol
	monitorsGovBytecode = `0x60a060405234801561001057600080fd5b5060405162001ad138038062001ad18339810160408190526100319161009d565b8061003b3361004d565b6001600160a01b0316608052506100cd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100af57600080fd5b81516001600160a01b03811681146100c657600080fd5b9392505050565b6080516119e8620000e960003960006103be01526119e86000f3fe6080604052600436106100dd5760003560e01c80636d9898581161007f578063939624ab11610059578063939624ab146102545780639dfc678314610274578063e473696314610294578063f2fde38b146102c157600080fd5b80636d98985814610204578063715018a6146102175780638da5cb5b1461022c57600080fd5b806344a58781116100bb57806344a587811461014d57806347998be3146101ac578063562aa201146101cc5780635a627dbc146101fc57600080fd5b80630eb1b586146100e2578063122b8cbb1461010b57806324500eb11461012d575b600080fd5b3480156100ee57600080fd5b506100f860015481565b6040519081526020015b60405180910390f35b34801561011757600080fd5b5061012b61012636600461165b565b6102e1565b005b34801561013957600080fd5b5061012b610148366004611798565b6103a9565b34801561015957600080fd5b5061016d6101683660046117ba565b61057c565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610102565b3480156101b857600080fd5b5061012b6101c73660046117ba565b600155565b3480156101d857600080fd5b506101ec6101e7366004611798565b6105d5565b6040519015158152602001610102565b61012b610654565b61012b6102123660046117d3565b6106f5565b34801561022357600080fd5b5061012b610756565b34801561023857600080fd5b506000546040516001600160a01b039091168152602001610102565b34801561026057600080fd5b5061012b61026f3660046117ba565b61076a565b34801561028057600080fd5b5061012b61028f36600461180e565b61092b565b3480156102a057600080fd5b506102b46102af366004611798565b610a4b565b6040516101029190611849565b3480156102cd57600080fd5b5061012b6102dc366004611798565b610abb565b6102e9610b34565b600254156103345760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e4b5a5b9a5d1a585b1a5e9959606a1b60448201526064015b60405180910390fd5b60005b81518110156103a557600082828151811061035457610354611896565b6020026020010151905061037081600001518260800151610b8e565b6103928160000151826020015183604001518460600151856080015142610b9c565b508061039d816118c2565b915050610337565b5050565b6040516336b87bd760e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636d70f7ae90602401602060405180830381865afa15801561040d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043191906118db565b61046c5760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b7b832b930ba37b960a11b604482015260640161032b565b60006104778261100b565b50905060005b600782015481101561051057336001600160a01b03168260070182815481106104a8576104a8611896565b6000918252602090912001546001600160a01b0316036104fe5760405162461bcd60e51b8152602060048201526011602482015270185b1c9958591e4b5b9bdb5a5b985d1959607a1b604482015260640161032b565b80610508816118c2565b91505061047d565b5060078101805460018101825560009182526020918290200180546001600160a01b031916339081179091556040519081526001600160a01b038416917faa7a281d3036b8a4b28c44a211e3eabaf4b0549f072186b915b819c7b619bd74910160405180910390a25050565b6002818154811061058c57600080fd5b600091825260209091206008909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169650929491939092919087565b60025460009081036105e957506000919050565b6001600160a01b038216600090815260036020526040812054600280549192918390811061061957610619611896565b6000918252602090912060089091020180549091506001600160a01b03858116911614801561064c575060008160050154115b949350505050565b600061065f3361100b565b509050600034116106a45760405162461bcd60e51b815260206004820152600f60248201526e6465706f7369742d6e6f7468696e6760881b604482015260640161032b565b348160040160008282546106b891906118fd565b909155505060405134815233907fb218e74e1d7548db0bff4bc81f75f5b5d41d66cf9151f0311fbcb7344bd9d0339060200160405180910390a250565b61070433848484346000610b9c565b6040805160ff851681526020810184905290810182905234606082015233907f3ca1553e5e289d81faa2afbcf3f32d4df4c14526b7e2a81cd1bb25d1b1415b5d906080015b60405180910390a2505050565b61075e610b34565b61076860006110dd565b565b6000806107763361100b565b9150915082826004015410156107c25760405162461bcd60e51b81526020600482015260116024820152700eed2e8d0c8e4c2ee5ae8dede5adaeac6d607b1b604482015260640161032b565b828260040160008282546107d69190611916565b9091555050600482015467016345785d8a00001115610835576005820154156108355760405162461bcd60e51b81526020600482015260116024820152706d6f6e69746f722d69732d61637469766560781b604482015260640161032b565b81600401546000036108ef576002818154811061085457610854611896565b60009182526020822060089091020180546001600160a01b0319168155600181018290556002810182905560038101829055600481018290556005810182905560068101829055906108a960078301826114a0565b50503360009081526003602052604081208190556004805460018101825591527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018190555b6108f9338461112d565b60405183815233907f551255bcb3977c75cd031d9bc6d8233f1491dd8bcfe857b996b0afb99b5c3d3990602001610749565b6002604051806101000160405280336001600160a01b0316815260200187815260200186815260200185815260200184815260200160008152602001600081526020018367ffffffffffffffff81111561098757610987611538565b6040519080825280602002602001820160405280156109b0578160200160208202803683370190505b5090528154600180820184556000938452602093849020835160089093020180546001600160a01b0319166001600160a01b03909316929092178255828401519082015560408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151805192939192610a4192600785019201906114be565b5050505050505050565b60606000610a588361100b565b5060078101805460408051602080840282018101909252828152939450830182828015610aae57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a90575b5050505050915050919050565b610ac3610b34565b6001600160a01b038116610b285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032b565b610b31816110dd565b50565b6000546001600160a01b031633146107685760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032b565b6103a561271183308461124b565b8460ff1660021480610bb157508460ff166003145b610bf55760405162461bcd60e51b81526020600482015260156024820152740d2dcecc2d8d2c85ae0eac4d6caf25ae0e4caccd2f605b1b604482015260640161032b565b67016345785d8a0000821015610c405760405162461bcd60e51b815260206004820152601060248201526f6465706f7369742d746f6f2d6c65737360801b604482015260640161032b565b6001600160a01b0386166000908152600360205260409020548015610c995760405162461bcd60e51b815260206004820152600f60248201526e1b5bdb9a5d1bdc8b595e1a5cdd1959608a1b604482015260640161032b565b60025415610d1857866001600160a01b03166002600081548110610cbf57610cbf611896565b60009182526020909120600890910201546001600160a01b031603610d185760405162461bcd60e51b815260206004820152600f60248201526e1b5bdb9a5d1bdc8b595e1a5cdd1959608a1b604482015260640161032b565b60045415610ebd576004805460009190610d3490600190611916565b81548110610d4457610d44611896565b906000526020600020015490506004805480610d6257610d62611929565b60019003818190600052602060002001600090559055604051806101000160405280896001600160a01b031681526020018860ff16815260200187815260200186815260200185815260200184815260200160008152602001600067ffffffffffffffff811115610dd557610dd5611538565b604051908082528060200260200182016040528015610dfe578160200160208202803683370190505b5081525060028281548110610e1557610e15611896565b600091825260209182902083516008929092020180546001600160a01b0319166001600160a01b0390921691909117815582820151600182015560408301516002820155606083015160038201556080830151600482015560a0830151600582015560c0830151600682015560e083015180519192610e9c926007850192909101906114be565b5050506001600160a01b038816600090815260036020526040902055611002565b6002604051806101000160405280896001600160a01b031681526020018860ff16815260200187815260200186815260200185815260200184815260200160008152602001600067ffffffffffffffff811115610f1c57610f1c611538565b604051908082528060200260200182016040528015610f45578160200160208202803683370190505b5090528154600180820184556000938452602093849020835160089093020180546001600160a01b0319166001600160a01b03909316929092178255828401519082015560408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151805192939192610fd692600785019201906114be565b5050600254610fe89150600190611916565b6001600160a01b0388166000908152600360205260409020555b50505050505050565b600254600090819061104d5760405162461bcd60e51b815260206004820152600b60248201526a3737ba16b6b7b734ba37b960a91b604482015260640161032b565b506001600160a01b038216600090815260036020526040902054600280548290811061107b5761107b611896565b6000918252602090912060089091020180549092506001600160a01b038481169116146110d85760405162461bcd60e51b815260206004820152600b60248201526a3737ba16b6b7b734ba37b960a91b604482015260640161032b565b915091565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8047101561117d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161032b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146111ca576040519150601f19603f3d011682016040523d82523d6000602084013e6111cf565b606091505b50509050806112465760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161032b565b505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526112a59085906112ab565b50505050565b6000611300826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661137d9092919063ffffffff16565b805190915015611246578080602001905181019061131e91906118db565b6112465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161032b565b606061064c848460008585600080866001600160a01b031685876040516113a49190611963565b60006040518083038185875af1925050503d80600081146113e1576040519150601f19603f3d011682016040523d82523d6000602084013e6113e6565b606091505b50915091506113f787838387611402565b979650505050505050565b6060831561147157825160000361146a576001600160a01b0385163b61146a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161032b565b508161064c565b61064c83838151156114865781518083602001fd5b8060405162461bcd60e51b815260040161032b919061197f565b5080546000825590600052602060002090810190610b319190611523565b828054828255906000526020600020908101928215611513579160200282015b8281111561151357825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906114de565b5061151f929150611523565b5090565b5b8082111561151f5760008155600101611524565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561157257611572611538565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156115a1576115a1611538565b604052919050565b600067ffffffffffffffff8211156115c3576115c3611538565b5060051b60200190565b80356001600160a01b03811681146115e457600080fd5b919050565b600082601f8301126115fa57600080fd5b8135602061160f61160a836115a9565b611578565b82815260059290921b8401810191818101908684111561162e57600080fd5b8286015b8481101561165057611643816115cd565b8352918301918301611632565b509695505050505050565b6000602080838503121561166e57600080fd5b823567ffffffffffffffff8082111561168657600080fd5b818501915085601f83011261169a57600080fd5b81356116a861160a826115a9565b81815260059190911b830184019084810190888311156116c757600080fd5b8585015b8381101561178b578035858111156116e35760008081fd5b8601610100818c03601f19018113156116fc5760008081fd5b61170461154e565b61170f8a84016115cd565b81526040808401358b830152606080850135828401526080915081850135818401525060a0808501358284015260c0915081850135818401525060e080850135828401528385013593508984111561176957600091508182fd5b6117778f8d868801016115e9565b9083015250855250509186019186016116cb565b5098975050505050505050565b6000602082840312156117aa57600080fd5b6117b3826115cd565b9392505050565b6000602082840312156117cc57600080fd5b5035919050565b6000806000606084860312156117e857600080fd5b833560ff811681146117f957600080fd5b95602085013595506040909401359392505050565b600080600080600060a0868803121561182657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6020808252825182820181905260009190848201906040850190845b8181101561188a5783516001600160a01b031683529284019291840191600101611865565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016118d4576118d46118ac565b5060010190565b6000602082840312156118ed57600080fd5b815180151581146117b357600080fd5b80820180821115611910576119106118ac565b92915050565b81810381811115611910576119106118ac565b634e487b7160e01b600052603160045260246000fd5b60005b8381101561195a578181015183820152602001611942565b50506000910152565b6000825161197581846020870161193f565b9190910192915050565b602081526000825180602084015261199e81604085016020870161193f565b601f01601f1916919091016040019291505056fea2646970667358221220cab8a95fd418d64b517b3ac3409741d68c1f0ac74d4120ad23aa442aa4555c6364736f6c63430008100033`
)

var (
	operatorsGovABI = ethutils.MustParseABI(`
[
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pubkeyPrefix",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "pubkeyX",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "rpcUrl",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "intro",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "selfStakedAmt",
          "type": "uint256"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeLastOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
]
`)

	monitorsGovABI = ethutils.MustParseABI(`
[
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "setLastElectionTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastElectionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pubkeyPrefix",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "pubkeyX",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "intro",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nominatedCount",
          "type": "uint256"
        }
      ],
      "name": "addMonitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
]
`)
)

var (
	noOpLogger           = log.NewNopLogger()
	operatorMinStakedAmt = big.NewInt(0).Mul(big.NewInt(param.OperatorMinStakedBCH), big.NewInt(1e18))
	monitorMinStakedAmt  = big.NewInt(0).Mul(big.NewInt(param.MonitorMinStakedBCH), big.NewInt(1e18))
)

func TestOperatorsGovStorageRW(t *testing.T) {
	key, addr := testutils.GenKeyAndAddr()
	_app := testutils.CreateTestApp(key)
	defer _app.Destroy()

	tx, _, contractAddr := _app.DeployContractInBlockWithGas(key,
		testutils.HexToBytes(operatorsGovBytecode), testutils.DefaultGasLimit*2, testutils.DefaultGasPrice)
	_app.EnsureTxSuccess(tx.Hash())

	addOperator1 := packAddOperatorData(02, "pubkeyX_o1", "12.34.56.78:9011", "operator#1", big.NewInt(1012), big.NewInt(1011))
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addOperator1)
	_app.EnsureTxSuccess(tx.Hash())

	addOperator2 := packAddOperatorData(03, "pubkeyX_o2", "12.34.56.78:9012", "operator#2", big.NewInt(2012), big.NewInt(2011))
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addOperator2)
	_app.EnsureTxSuccess(tx.Hash())

	addOperator3 := packAddOperatorData(02, "pubkeyX_o3", "12.34.56.78:9013", "operator#3", big.NewInt(3012), big.NewInt(3011))
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addOperator3)
	_app.EnsureTxSuccess(tx.Hash())

	// read data from Go
	ctx := _app.GetRpcContext()
	defer ctx.Close(false)

	accInfo := ctx.GetAccount(contractAddr)
	seq := accInfo.Sequence()

	operators := crosschain.ReadOperatorInfos(ctx, seq)
	require.Len(t, operators, 3)
	require.Equal(t, addr, operators[0].Addr)
	require.Equal(t, "027075626b6579585f6f3100000000000000000000000000000000000000000000",
		hex.EncodeToString(operators[0].Pubkey))
	require.Equal(t, "12.34.56.78:9011", bytes32ToStr(operators[0].RpcUrl))
	require.Equal(t, "operator#1", bytes32ToStr(operators[0].Intro))
	require.Equal(t, uint64(1012), operators[0].TotalStakedAmt.Uint64())
	require.Equal(t, uint64(1011), operators[0].SelfStakedAmt.Uint64())
	require.Equal(t, uint64(0), operators[0].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operators[0].OldElectedTime.Uint64())

	require.Equal(t, addr, operators[1].Addr)
	require.Equal(t, "037075626b6579585f6f3200000000000000000000000000000000000000000000",
		hex.EncodeToString(operators[1].Pubkey))
	require.Equal(t, "12.34.56.78:9012", bytes32ToStr(operators[1].RpcUrl))
	require.Equal(t, "operator#2", bytes32ToStr(operators[1].Intro))
	require.Equal(t, uint64(2012), operators[1].TotalStakedAmt.Uint64())
	require.Equal(t, uint64(2011), operators[1].SelfStakedAmt.Uint64())
	require.Equal(t, uint64(0), operators[1].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operators[1].OldElectedTime.Uint64())

	require.Equal(t, addr, operators[2].Addr)
	require.Equal(t, "027075626b6579585f6f3300000000000000000000000000000000000000000000",
		hex.EncodeToString(operators[2].Pubkey))
	require.Equal(t, "12.34.56.78:9013", bytes32ToStr(operators[2].RpcUrl))
	require.Equal(t, "operator#3", bytes32ToStr(operators[2].Intro))
	require.Equal(t, uint64(3012), operators[2].TotalStakedAmt.Uint64())
	require.Equal(t, uint64(3011), operators[2].SelfStakedAmt.Uint64())
	require.Equal(t, uint64(0), operators[2].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operators[2].OldElectedTime.Uint64())

	crosschain.WriteOperatorElectedTime(ctx, seq, 1, 123)
	operators = crosschain.ReadOperatorInfos(ctx, seq)
	require.Equal(t, uint64(0), operators[0].ElectedTime.Uint64())
	require.Equal(t, uint64(123), operators[1].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operators[2].ElectedTime.Uint64())

	crosschain.WriteOperatorOldElectedTime(ctx, seq, 2, 456)
	operators = crosschain.ReadOperatorInfos(ctx, seq)
	require.Equal(t, uint64(0), operators[0].OldElectedTime.Uint64())
	require.Equal(t, uint64(0), operators[1].OldElectedTime.Uint64())
	require.Equal(t, uint64(456), operators[2].OldElectedTime.Uint64())
}

func TestMonitorsGovStorageRW(t *testing.T) {
	key, addr := testutils.GenKeyAndAddr()
	_app := testutils.CreateTestApp(key)
	defer _app.Destroy()

	tx, _, contractAddr := _app.DeployContractInBlockWithGas(key,
		testutils.HexToBytes(monitorsGovBytecode), testutils.DefaultGasLimit*2, testutils.DefaultGasPrice)
	_app.EnsureTxSuccess(tx.Hash())

	addMonitor1 := packAddMonitorData(02, "pubkeyX_m1", "monitor#1", big.NewInt(8001), 0)
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addMonitor1)
	_app.EnsureTxSuccess(tx.Hash())

	addMonitor2 := packAddMonitorData(03, "pubkeyX_m2", "monitor#2", big.NewInt(8002), 2)
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addMonitor2)
	_app.EnsureTxSuccess(tx.Hash())

	addMonitor3 := packAddMonitorData(02, "pubkeyX_m3", "monitor#3", big.NewInt(8003), 0)
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addMonitor3)
	_app.EnsureTxSuccess(tx.Hash())

	setLastElectionTime := monitorsGovABI.MustPack("setLastElectionTime", big.NewInt(223344))
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, setLastElectionTime)
	_app.EnsureTxSuccess(tx.Hash())

	// read data from Go
	ctx := _app.GetRpcContext()
	defer ctx.Close(false)

	accInfo := ctx.GetAccount(contractAddr)
	seq := accInfo.Sequence()

	monitors := crosschain.ReadMonitorInfos(ctx, seq)
	require.Len(t, monitors, 3)
	require.Equal(t, addr, monitors[0].Addr)
	require.Equal(t, "027075626b6579585f6d3100000000000000000000000000000000000000000000",
		hex.EncodeToString(monitors[0].Pubkey))
	require.Equal(t, "monitor#1", bytes32ToStr(monitors[0].Intro))
	require.Equal(t, uint64(8001), monitors[0].StakedAmt.Uint64())
	require.Equal(t, uint64(0), monitors[0].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitors[0].NominatedByOps.Uint64())

	require.Equal(t, addr, monitors[1].Addr)
	require.Equal(t, "037075626b6579585f6d3200000000000000000000000000000000000000000000",
		hex.EncodeToString(monitors[1].Pubkey))
	require.Equal(t, "monitor#2", bytes32ToStr(monitors[1].Intro))
	require.Equal(t, uint64(8002), monitors[1].StakedAmt.Uint64())
	require.Equal(t, uint64(0), monitors[1].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitors[0].NominatedByOps.Uint64())

	require.Equal(t, addr, monitors[2].Addr)
	require.Equal(t, "027075626b6579585f6d3300000000000000000000000000000000000000000000",
		hex.EncodeToString(monitors[2].Pubkey))
	require.Equal(t, "monitor#3", bytes32ToStr(monitors[2].Intro))
	require.Equal(t, uint64(8003), monitors[2].StakedAmt.Uint64())
	require.Equal(t, uint64(0), monitors[2].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitors[0].NominatedByOps.Uint64())

	crosschain.WriteMonitorElectedTime(ctx, seq, 1, 12345)
	monitors = crosschain.ReadMonitorInfos(ctx, seq)
	require.Equal(t, uint64(0), monitors[0].ElectedTime.Uint64())
	require.Equal(t, uint64(12345), monitors[1].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitors[2].ElectedTime.Uint64())

	crosschain.WriteMonitorOldElectedTime(ctx, seq, 2, 54321)
	monitors = crosschain.ReadMonitorInfos(ctx, seq)
	require.Equal(t, uint64(0), monitors[0].OldElectedTime.Uint64())
	require.Equal(t, uint64(0), monitors[1].OldElectedTime.Uint64())
	require.Equal(t, uint64(54321), monitors[2].OldElectedTime.Uint64())

	lastElectionTime := crosschain.ReadMonitorsLastElectionTime(ctx, seq)
	require.Equal(t, uint64(223344), lastElectionTime.Uint64())

	crosschain.WriteMonitorsLastElectionTime(ctx, seq, 556677)
	lastElectionTime = crosschain.ReadMonitorsLastElectionTime(ctx, seq)
	require.Equal(t, uint64(556677), lastElectionTime.Uint64())
}

func TestOperatorsElection(t *testing.T) {
	key, _ := testutils.GenKeyAndAddr()
	_app := testutils.CreateTestApp(key)
	defer _app.Destroy()

	tx, _, contractAddr := _app.DeployContractInBlockWithGas(key,
		testutils.HexToBytes(operatorsGovBytecode), testutils.DefaultGasLimit*2, testutils.DefaultGasPrice)
	_app.EnsureTxSuccess(tx.Hash())

	ctx := _app.GetRpcContext()
	accInfo := ctx.GetAccount(contractAddr)
	seq := accInfo.Sequence()
	ctx.Close(false)

	// add 9 valid operator candidates
	for i := int64(0); i < 9; i++ {
		data := packAddOperatorData(02,
			fmt.Sprintf("pk#%d", i),
			fmt.Sprintf("rpc#%d", i),
			fmt.Sprintf("op#%d", i),
			testutils.BigIntAddI64(operatorMinStakedAmt, 50),
			testutils.BigIntAddI64(operatorMinStakedAmt, i),
		)
		tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, data)
		_app.EnsureTxSuccess(tx.Hash())
	}

	// not enough operator candidates
	ctx = _app.GetRpcContext()
	require.Equal(t, crosschain.OperatorElectionNotEnoughCandidates,
		crosschain.ElectOperatorsForUT(ctx, seq, 12345, noOpLogger))
	ctx.Close(false)

	// add 1 invalid operator candidate
	data := packAddOperatorData(03, "pk123", "rpc123", "op123",
		big.NewInt(0).Add(operatorMinStakedAmt, big.NewInt(123)),
		big.NewInt(0).Sub(operatorMinStakedAmt, big.NewInt(123)))
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, data)
	_app.EnsureTxSuccess(tx.Hash())
	ctx = _app.GetRpcContext()
	require.Equal(t, crosschain.OperatorElectionNotEnoughCandidates,
		crosschain.ElectOperatorsForUT(ctx, seq, 12345, noOpLogger))
	ctx.Close(false)

	// add 3 valid operator candidates
	for i := int64(9); i < 12; i++ {
		data := packAddOperatorData(02,
			fmt.Sprintf("pk#%d", i),
			fmt.Sprintf("rpc#%d", i),
			fmt.Sprintf("op#%d", i),
			big.NewInt(0).Add(operatorMinStakedAmt, big.NewInt(i*10)),
			big.NewInt(0).Add(operatorMinStakedAmt, big.NewInt(i)),
		)
		tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, data)
		_app.EnsureTxSuccess(tx.Hash())
	}

	// first election
	ctx = _app.GetRunTxContext()
	require.Equal(t, crosschain.OperatorElectionOK,
		crosschain.ElectOperatorsForUT(ctx, seq, 0x12345, noOpLogger))
	operatorInfos := crosschain.ReadOperatorInfos(ctx, seq)
	ctx.Close(true)
	require.Len(t, operatorInfos, 13)
	require.Equal(t, uint64(0), operatorInfos[0].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[1].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[2].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[3].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[4].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[5].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[6].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[7].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[8].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[9].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[10].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[11].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[12].ElectedTime.Uint64())
	for i := 0; i < 13; i++ {
		require.Equal(t, uint64(0), operatorInfos[i].OldElectedTime.Uint64())
	}

	ctx = _app.GetRunTxContext()
	require.Equal(t, crosschain.OperatorElectionNotChanged,
		crosschain.ElectOperatorsForUT(ctx, seq, 0x123456, noOpLogger))
	ctx.Close(false)

	// add 4 valid operator candidates
	for i := int64(12); i < 16; i++ {
		data := packAddOperatorData(03,
			fmt.Sprintf("pk#%d", i),
			fmt.Sprintf("rpc#%d", i),
			fmt.Sprintf("op#%d", i),
			big.NewInt(0).Add(operatorMinStakedAmt, big.NewInt(i*10)),
			big.NewInt(0).Add(operatorMinStakedAmt, big.NewInt(i*10)),
		)
		tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, data)
		_app.EnsureTxSuccess(tx.Hash())
	}

	ctx = _app.GetRunTxContext()
	require.Equal(t, crosschain.OperatorElectionOK,
		crosschain.ElectOperatorsForUT(ctx, seq, 0x123456, noOpLogger))

	operatorInfos = crosschain.ReadOperatorInfos(ctx, seq)
	ctx.Close(true)
	require.Len(t, operatorInfos, 17)
	// new elected time
	require.Equal(t, uint64(0), operatorInfos[0].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[1].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[2].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[3].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[4].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), operatorInfos[5].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), operatorInfos[6].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), operatorInfos[7].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), operatorInfos[8].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[9].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), operatorInfos[10].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), operatorInfos[11].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), operatorInfos[12].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[13].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), operatorInfos[14].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), operatorInfos[15].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), operatorInfos[16].ElectedTime.Uint64())
	// old elected time
	require.Equal(t, uint64(0), operatorInfos[0].OldElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[1].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[2].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[3].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[4].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[5].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[6].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[7].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[8].OldElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[9].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[10].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[11].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), operatorInfos[12].OldElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[13].OldElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[14].OldElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[15].OldElectedTime.Uint64())
	require.Equal(t, uint64(0), operatorInfos[16].OldElectedTime.Uint64())
}

func TestMonitorsElection(t *testing.T) {
	key, _ := testutils.GenKeyAndAddr()
	_app := testutils.CreateTestApp(key)
	defer _app.Destroy()

	tx, _, contractAddr := _app.DeployContractInBlockWithGas(key,
		testutils.HexToBytes(monitorsGovBytecode), testutils.DefaultGasLimit*2, testutils.DefaultGasPrice)
	_app.EnsureTxSuccess(tx.Hash())

	ctx := _app.GetRpcContext()
	accInfo := ctx.GetAccount(contractAddr)
	seq := accInfo.Sequence()
	ctx.Close(false)

	// add 5 valid monitor candidates
	for i := int64(0); i < 5; i++ {
		data := packAddMonitorData(02,
			fmt.Sprintf("pk#%d", i),
			fmt.Sprintf("op#%d", i),
			big.NewInt(0).Add(monitorMinStakedAmt, big.NewInt(i)),
			10,
		)
		tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, data)
		_app.EnsureTxSuccess(tx.Hash())
	}
	// add 2 invalid monitor candidates
	for i := 5; i < 7; i++ {
		data := packAddMonitorData(02,
			fmt.Sprintf("pk#%d", i),
			fmt.Sprintf("op#%d", i),
			big.NewInt(123),
			10,
		)
		tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, data)
		_app.EnsureTxSuccess(tx.Hash())
	}

	// invalid nomination count
	ctx = _app.GetRunTxContext()
	require.Equal(t, crosschain.MonitorElectionNotEnoughCandidates,
		crosschain.ElectMonitorsForUT(ctx, seq, map[[33]byte]int64{}, 123, noOpLogger))
	ctx.Close(false)

	// invalid nominations
	ctx = _app.GetRunTxContext()
	nominations := map[[33]byte]int64{
		toBytes33(02, "pk#1"): 1,
		toBytes33(02, "pk#2"): 1,
		toBytes33(02, "pk#5"): 1, // invalid
	}
	require.Equal(t, crosschain.MonitorElectionNotEnoughCandidates,
		crosschain.ElectMonitorsForUT(ctx, seq, nominations, 123, noOpLogger))
	nominations = map[[33]byte]int64{
		toBytes33(02, "pk#2"): 1,
		toBytes33(02, "pk#3"): 0, // invalid
		toBytes33(02, "pk#4"): 1,
	}
	require.Equal(t, crosschain.MonitorElectionNotEnoughCandidates,
		crosschain.ElectMonitorsForUT(ctx, seq, nominations, 123, noOpLogger))
	ctx.Close(false)

	// first election
	ctx = _app.GetRunTxContext()
	nominations = map[[33]byte]int64{
		toBytes33(02, "pk#2"): 100,
		toBytes33(02, "pk#3"): 200,
		toBytes33(02, "pk#4"): 300,
	}
	require.Equal(t, crosschain.MonitorElectionOK,
		crosschain.ElectMonitorsForUT(ctx, seq, nominations, 0x12345, noOpLogger))
	monitorInfos := crosschain.ReadMonitorInfos(ctx, seq)
	lastElectionTime := crosschain.ReadMonitorsLastElectionTime(ctx, seq)
	ctx.Close(true)
	require.Len(t, monitorInfos, 7)
	require.Equal(t, uint64(0), monitorInfos[0].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[1].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), monitorInfos[2].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), monitorInfos[3].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), monitorInfos[4].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[5].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[6].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), lastElectionTime.Uint64())
	for i := 0; i < 7; i++ {
		require.Equal(t, uint64(0), monitorInfos[i].OldElectedTime.Uint64())
	}

	// election ok
	ctx = _app.GetRunTxContext()
	nominations = map[[33]byte]int64{
		toBytes33(02, "pk#1"): 1100,
		toBytes33(02, "pk#2"): 1200,
		toBytes33(02, "pk#3"): 1300,
	}
	require.Equal(t, crosschain.MonitorElectionOK,
		crosschain.ElectMonitorsForUT(ctx, seq, nominations, 0x123456, noOpLogger))
	monitorInfos = crosschain.ReadMonitorInfos(ctx, seq)
	lastElectionTime = crosschain.ReadMonitorsLastElectionTime(ctx, seq)
	ctx.Close(true)
	require.Len(t, monitorInfos, 7)
	require.Equal(t, uint64(0x123456), lastElectionTime.Uint64())
	// new elected time
	require.Equal(t, uint64(0), monitorInfos[0].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), monitorInfos[1].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), monitorInfos[2].ElectedTime.Uint64())
	require.Equal(t, uint64(0x123456), monitorInfos[3].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[4].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[5].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[6].ElectedTime.Uint64())
	// old elected time
	require.Equal(t, uint64(0), monitorInfos[0].OldElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[1].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), monitorInfos[2].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), monitorInfos[3].OldElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), monitorInfos[4].OldElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[5].OldElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[6].OldElectedTime.Uint64())
}

func TestMonitorsElection_nominatedByOps(t *testing.T) {
	key, _ := testutils.GenKeyAndAddr()
	_app := testutils.CreateTestApp(key)
	defer _app.Destroy()

	tx, _, contractAddr := _app.DeployContractInBlockWithGas(key,
		testutils.HexToBytes(monitorsGovBytecode), testutils.DefaultGasLimit*2, testutils.DefaultGasPrice)
	_app.EnsureTxSuccess(tx.Hash())

	ctx := _app.GetRpcContext()
	accInfo := ctx.GetAccount(contractAddr)
	seq := accInfo.Sequence()
	ctx.Close(false)

	// add 10 monitor candidates
	for i := int64(0); i < 10; i++ {
		data := packAddMonitorData(02,
			fmt.Sprintf("pk#%d", i),
			fmt.Sprintf("op#%d", i),
			big.NewInt(0).Add(monitorMinStakedAmt, big.NewInt(i)),
			i,
		)
		tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, data)
		_app.EnsureTxSuccess(tx.Hash())
	}

	// first election
	ctx = _app.GetRunTxContext()
	nominations := map[[33]byte]int64{
		toBytes33(02, "pk#3"): 300, // nominatedByOps too small
		toBytes33(02, "pk#4"): 400, // nominatedByOps too small
		toBytes33(02, "pk#5"): 500, // nominatedByOps too small
		toBytes33(02, "pk#6"): 600, // ok
		toBytes33(02, "pk#7"): 700, // ok
		toBytes33(02, "pk#8"): 800, // ok
		toBytes33(02, "pk#9"): 100,
	}
	require.Equal(t, crosschain.MonitorElectionOK,
		crosschain.ElectMonitorsForUT(ctx, seq, nominations, 0x12345, noOpLogger))
	monitorInfos := crosschain.ReadMonitorInfos(ctx, seq)
	lastElectionTime := crosschain.ReadMonitorsLastElectionTime(ctx, seq)
	ctx.Close(true)
	require.Len(t, monitorInfos, 10)
	require.Equal(t, uint64(0), monitorInfos[0].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[1].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[2].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[3].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[4].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitorInfos[5].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), monitorInfos[6].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), monitorInfos[7].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), monitorInfos[8].ElectedTime.Uint64())
	require.Equal(t, uint64(0x0), monitorInfos[9].ElectedTime.Uint64())
	require.Equal(t, uint64(0x12345), lastElectionTime.Uint64())
}

func packAddOperatorData(pubkeyPrefix int64, pubkeyX, rpcURL, intro string,
	totalStakedAmt, selfStakedAmt *big.Int) []byte {

	return operatorsGovABI.MustPack("addOperator",
		big.NewInt(pubkeyPrefix),
		toBytes32(pubkeyX),
		toBytes32(rpcURL),
		toBytes32(intro),
		totalStakedAmt,
		selfStakedAmt,
	)
}
func packAddMonitorData(pubkeyPrefix int64, pubkeyX, intro string, stakedAmt *big.Int, nominatedByOps int64) []byte {
	return monitorsGovABI.MustPack("addMonitor",
		big.NewInt(pubkeyPrefix),
		toBytes32(pubkeyX),
		toBytes32(intro),
		stakedAmt,
		big.NewInt(nominatedByOps),
	)
}

func toBytes32(s string) [32]byte {
	out := [32]byte{}
	copy(out[:], s)
	return out
}
func toBytes33(pubkeyPrefix uint8, pubkeyX string) [33]byte {
	out := [33]byte{pubkeyPrefix}
	copy(out[1:], pubkeyX)
	return out
}

func bytes32ToStr(bs []byte) string {
	return strings.TrimRight(string(bs), string([]byte{0}))
}
