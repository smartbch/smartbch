package crosschain_test

import (
	"encoding/hex"
	"math/big"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/smartbch/smartbch/crosschain"
	"github.com/smartbch/smartbch/internal/ethutils"
	"github.com/smartbch/smartbch/internal/testutils"
)

func TestOperatorsGov(t *testing.T) {
	_abi := ethutils.MustParseABI(`
[
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pubkeyPrefix",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "pubkeyX",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "rpcUrl",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "intro",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "selfStakedAmt",
          "type": "uint256"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
]
`)

	// CCOperatorsGovForTest.sol
	creationBytecode := testutils.HexToBytes(`0x608060405234801561001057600080fd5b50611b24806100206000396000f3fe60806040526004361061003f5760003560e01c80632504a216146100445780636199eef61461006d578063692ea80214610089578063a5a0e919146100b2575b600080fd5b34801561005057600080fd5b5061006b6004803603810190610066919061132e565b6100ce565b005b6100876004803603810190610082919061127c565b610636565b005b34801561009557600080fd5b506100b060048036038101906100ab91906112a5565b6109d7565b005b6100cc60048036038101906100c7919061136a565b610aea565b005b6000600460008481526020019081526020016000209050818160020154101561012c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610123906116b0565b60405180910390fd5b426283d6008260010160149054906101000a900463ffffffff1663ffffffff166101569190611768565b10610196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018d90611650565b60405180910390fd5b6000600160008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000808281548110610239577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600802019050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156102dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d490611590565b60405180910390fd5b838160050160008282546102f191906117be565b925050819055503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156103ca578381600601600082825461036491906117be565b925050819055506000816007015411156103c95769021e19e0c9bab24000008160060154116103c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bf90611690565b60405180910390fd5b5b5b6000816005015414156104ee5760008281548110610411577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060080201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905560048201600090556005820160009055600682016000905560078201600090555050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560028290806001815401808255809150506001900390600052602060002001600090919091909150555b8383600201600082825461050291906117be565b9250508190555060008360020154141561059a5760046000868152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160146101000a81549063ffffffff0219169055600282016000905550505b6105a43385611134565b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f4e4da858820d03358af7e05090375c4a8cfaddda3c24e48bd64e376f13d2c6bd87876040516106279291906116d0565b60405180910390a35050505050565b60003411610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090611670565b60405180910390fd5b600060036000815461068a90611857565b919050819055905060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020014263ffffffff168152602001348152506004600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548163ffffffff021916908363ffffffff160217905550606082015181600201559050506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000808281548110610839577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020190508373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d290611590565b60405180910390fd5b348160050160008282546108ef9190611768565b925050819055503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610946573481600601600082825461093e9190611768565b925050819055505b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167febc590f21987ecf5c1f8466f90a1a5d112eec48f1c2e652a65c42034cc2c107a85346040516109c99291906116d0565b60405180910390a350505050565b60006040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018681526020018581526020018481526020018381526020016000815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701555050505050505050565b60028460ff161480610aff575060038460ff16145b610b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b35906115b0565b60405180910390fd5b69021e19e0c9bab2400000341015610b8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b82906115d0565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c04906115f0565b60405180910390fd5b600060028054905010610e3857600060026001600280549050610c3091906117be565b81548110610c67577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506002805480610cac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590556040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018660ff168152602001858152602001848152602001838152602001348152602001348152602001600081525060008281548110610d50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015590505080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050610f9c565b60006040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018660ff1681526020018581526020018481526020018381526020013481526020013481526020016000815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015550506001600080549050610f5891906117be565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020014263ffffffff168152602001348152506004600060036000815461100290611857565b919050819055815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548163ffffffff021916908363ffffffff160217905550606082015181600201559050503373ffffffffffffffffffffffffffffffffffffffff167ff60326b9d09410d6ce5b777e4d80932914842920440df63a64bd2413b2f5ff1c85858585346040516111269594939291906116f9565b60405180910390a250505050565b80471015611177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116e90611630565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161119d9061157b565b60006040518083038185875af1925050503d80600081146111da576040519150601f19603f3d011682016040523d82523d6000602084013e6111df565b606091505b5050905080611223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121a90611610565b60405180910390fd5b505050565b60008135905061123781611a92565b92915050565b60008135905061124c81611aa9565b92915050565b60008135905061126181611ac0565b92915050565b60008135905061127681611ad7565b92915050565b60006020828403121561128e57600080fd5b600061129c84828501611228565b91505092915050565b60008060008060008060c087890312156112be57600080fd5b60006112cc89828a01611252565b96505060206112dd89828a0161123d565b95505060406112ee89828a0161123d565b94505060606112ff89828a0161123d565b935050608061131089828a01611252565b92505060a061132189828a01611252565b9150509295509295509295565b6000806040838503121561134157600080fd5b600061134f85828601611252565b925050602061136085828601611252565b9150509250929050565b6000806000806080858703121561138057600080fd5b600061138e87828801611267565b945050602061139f8782880161123d565b93505060406113b08782880161123d565b92505060606113c18782880161123d565b91505092959194509250565b6113d681611804565b82525050565b60006113e9601083611757565b91506113f4826118cf565b602082019050919050565b600061140c601583611757565b9150611417826118f8565b602082019050919050565b600061142f601083611757565b915061143a82611921565b602082019050919050565b6000611452601083611757565b915061145d8261194a565b602082019050919050565b6000611475603a83611757565b915061148082611973565b604082019050919050565b6000611498601d83611757565b91506114a3826119c2565b602082019050919050565b60006114bb600a83611757565b91506114c6826119eb565b602082019050919050565b60006114de600f83611757565b91506114e982611a14565b602082019050919050565b600061150160008361174c565b915061150c82611a3d565b600082019050919050565b6000611524601383611757565b915061152f82611a40565b602082019050919050565b6000611547601183611757565b915061155282611a69565b602082019050919050565b6115668161182e565b82525050565b61157581611845565b82525050565b6000611586826114f4565b9150819050919050565b600060208201905081810360008301526115a9816113dc565b9050919050565b600060208201905081810360008301526115c9816113ff565b9050919050565b600060208201905081810360008301526115e981611422565b9050919050565b6000602082019050818103600083015261160981611445565b9050919050565b6000602082019050818103600083015261162981611468565b9050919050565b600060208201905081810360008301526116498161148b565b9050919050565b60006020820190508181036000830152611669816114ae565b9050919050565b60006020820190508181036000830152611689816114d1565b9050919050565b600060208201905081810360008301526116a981611517565b9050919050565b600060208201905081810360008301526116c98161153a565b9050919050565b60006040820190506116e5600083018561155d565b6116f2602083018461155d565b9392505050565b600060a08201905061170e600083018861156c565b61171b60208301876113cd565b61172860408301866113cd565b61173560608301856113cd565b611742608083018461155d565b9695505050505050565b600081905092915050565b600082825260208201905092915050565b60006117738261182e565b915061177e8361182e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117b3576117b26118a0565b5b828201905092915050565b60006117c98261182e565b91506117d48361182e565b9250828210156117e7576117e66118a0565b5b828203905092915050565b60006117fd8261180e565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061185082611838565b9050919050565b60006118628261182e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611895576118946118a0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f6e6f2d737563682d6f70657261746f7200000000000000000000000000000000600082015250565b7f696e76616c69642d7075626b65792d7072656669780000000000000000000000600082015250565b7f6465706f7369742d746f6f2d6c65737300000000000000000000000000000000600082015250565b7f6f70657261746f722d6578697374656400000000000000000000000000000000600082015250565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b7f6e6f742d6d617475726500000000000000000000000000000000000000000000600082015250565b7f6465706f7369742d6e6f7468696e670000000000000000000000000000000000600082015250565b50565b7f746f6f2d6c6573732d73656c662d7374616b6500000000000000000000000000600082015250565b7f77697468647261772d746f6f2d6d756368000000000000000000000000000000600082015250565b611a9b816117f2565b8114611aa657600080fd5b50565b611ab281611804565b8114611abd57600080fd5b50565b611ac98161182e565b8114611ad457600080fd5b50565b611ae081611838565b8114611aeb57600080fd5b5056fea2646970667358221220818da741dffd44003d94df510a164a85b593795442a8abb1893c2eff61408dac64736f6c63430008040033`)

	key, addr := testutils.GenKeyAndAddr()
	_app := testutils.CreateTestApp(key)
	defer _app.Destroy()

	tx, _, contractAddr := _app.DeployContractInBlock(key, creationBytecode)
	_app.EnsureTxSuccess(tx.Hash())

	addOperator1 := _abi.MustPack("addOperator",
		big.NewInt(02),
		toBytes32("pubkeyX_o1"),
		toBytes32("12.34.56.78:9011"),
		toBytes32("operator#1"),
		big.NewInt(1011),
		big.NewInt(1012),
	)
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addOperator1)
	_app.EnsureTxSuccess(tx.Hash())

	addOperator2 := _abi.MustPack("addOperator",
		big.NewInt(03),
		toBytes32("pubkeyX_o2"),
		toBytes32("12.34.56.78:9012"),
		toBytes32("operator#2"),
		big.NewInt(2011),
		big.NewInt(2012),
	)
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addOperator2)
	_app.EnsureTxSuccess(tx.Hash())

	addOperator3 := _abi.MustPack("addOperator",
		big.NewInt(02),
		toBytes32("pubkeyX_o3"),
		toBytes32("12.34.56.78:9013"),
		toBytes32("operator#3"),
		big.NewInt(3011),
		big.NewInt(3012),
	)
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addOperator3)
	_app.EnsureTxSuccess(tx.Hash())

	// read data from Go
	ctx := _app.GetRpcContext()
	defer ctx.Close(false)

	accInfo := ctx.GetAccount(contractAddr)
	seq := accInfo.Sequence()

	operators := crosschain.ReadOperatorInfos(ctx, seq)
	require.Len(t, operators, 3)
	require.Equal(t, addr, operators[0].Addr)
	require.Equal(t, "027075626b6579585f6f3100000000000000000000000000000000000000000000",
		hex.EncodeToString(operators[0].Pubkey))
	require.Equal(t, "12.34.56.78:9011",
		strings.TrimRight(string(operators[0].RpcUrl), string([]byte{0})))
	require.Equal(t, "operator#1",
		strings.TrimRight(string(operators[0].Intro), string([]byte{0})))
	require.Equal(t, uint64(1011), operators[0].SelfStakedAmt.Uint64())
	require.Equal(t, uint64(1012), operators[0].TotalStakedAmt.Uint64())
	require.Equal(t, uint64(0), operators[0].ElectedTime.Uint64())

	require.Equal(t, addr, operators[1].Addr)
	require.Equal(t, "037075626b6579585f6f3200000000000000000000000000000000000000000000",
		hex.EncodeToString(operators[1].Pubkey))
	require.Equal(t, "12.34.56.78:9012",
		strings.TrimRight(string(operators[1].RpcUrl), string([]byte{0})))
	require.Equal(t, "operator#2",
		strings.TrimRight(string(operators[1].Intro), string([]byte{0})))
	require.Equal(t, uint64(2011), operators[1].SelfStakedAmt.Uint64())
	require.Equal(t, uint64(2012), operators[1].TotalStakedAmt.Uint64())
	require.Equal(t, uint64(0), operators[1].ElectedTime.Uint64())

	require.Equal(t, addr, operators[2].Addr)
	require.Equal(t, "027075626b6579585f6f3300000000000000000000000000000000000000000000",
		hex.EncodeToString(operators[2].Pubkey))
	require.Equal(t, "12.34.56.78:9013",
		strings.TrimRight(string(operators[2].RpcUrl), string([]byte{0})))
	require.Equal(t, "operator#3",
		strings.TrimRight(string(operators[2].Intro), string([]byte{0})))
	require.Equal(t, uint64(3011), operators[2].SelfStakedAmt.Uint64())
	require.Equal(t, uint64(3012), operators[2].TotalStakedAmt.Uint64())
	require.Equal(t, uint64(0), operators[2].ElectedTime.Uint64())

	//operators[1].votes = 123
	//ctx2 := _app.GetRunTxContext()
	crosschain.WriteOperatorElectedTime(ctx, seq, 1, 123)
	//ctx2.Close(true)
	operators = crosschain.ReadOperatorInfos(ctx, seq)
	require.Equal(t, uint64(0), operators[0].ElectedTime.Uint64())
	require.Equal(t, uint64(123), operators[1].ElectedTime.Uint64())
	require.Equal(t, uint64(0), operators[2].ElectedTime.Uint64())
}

func TestMonitorsGov(t *testing.T) {
	_abi := ethutils.MustParseABI(`
[
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "setLastElectionTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastElectionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pubkeyPrefix",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "pubkeyX",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "intro",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmt",
          "type": "uint256"
        }
      ],
      "name": "addMonitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
]
`)

	// CCOperatorsGovForTest.sol
	creationBytecode := testutils.HexToBytes(`0x608060405234801561001057600080fd5b5061151c806100206000396000f3fe6080604052600436106100555760003560e01c80630eb1b5861461005a57806347998be3146100855780635a627dbc146100ae5780636d989858146100b8578063939624ab146100d4578063f8aabdd4146100fd575b600080fd5b34801561006657600080fd5b5061006f610126565b60405161007c9190611176565b60405180910390f35b34801561009157600080fd5b506100ac60048036038101906100a79190610d98565b61012c565b005b6100b6610136565b005b6100d260048036038101906100cd9190610e24565b610308565b005b3480156100e057600080fd5b506100fb60048036038101906100f69190610d98565b6107d0565b005b34801561010957600080fd5b50610124600480360381019061011f9190610dc1565b610b75565b005b60005481565b8060008190555050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600182815481106101b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906006020190503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024f90611096565b60405180910390fd5b6000341161029b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610292906110f6565b60405180910390fd5b348160040160008282546102af91906111f2565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb218e74e1d7548db0bff4bc81f75f5b5d41d66cf9151f0311fbcb7344bd9d033346040516102fc9190611176565b60405180910390a25050565b60028360ff16148061031d575060038360ff16145b61035c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035390611036565b60405180910390fd5b69152d02c7e14af68000003410156103a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a090611076565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461042b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042290611136565b60405180910390fd5b6000600380549050106106355760006003600160038054905061044e9190611248565b81548110610485577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905060038054806104ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590556040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018560ff168152602001848152602001838152602001348152602001600081525060018281548110610561577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906006020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015590505080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050610777565b60016040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018560ff1681526020018481526020018381526020013481526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501555050600180805490506107339190611248565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b3373ffffffffffffffffffffffffffffffffffffffff167f3ca1553e5e289d81faa2afbcf3f32d4df4c14526b7e2a81cd1bb25d1b1415b5d848484346040516107c39493929190611191565b60405180910390a2505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060018281548110610850577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906006020190503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e990611096565b60405180910390fd5b8281600401541015610939576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093090611156565b60405180910390fd5b8281600401600082825461094d91906111f2565b9250508190555069152d02c7e14af680000081600401541015610a045760008160050154146109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890611056565b60405180910390fd5b620d2f00600054426109c39190611248565b10610a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa90611116565b60405180910390fd5b5b600081600401541415610b185760018281548110610a4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060060201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160009055600482016000905560058201600090555050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560038290806001815401808255809150506001900390600052602060002001600090919091909150555b610b223384610c65565b3373ffffffffffffffffffffffffffffffffffffffff167f551255bcb3977c75cd031d9bc6d8233f1491dd8bcfe857b996b0afb99b5c3d3984604051610b689190611176565b60405180910390a2505050565b60016040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018381526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155505050505050565b80471015610ca8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9f906110d6565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610cce90611021565b60006040518083038185875af1925050503d8060008114610d0b576040519150601f19603f3d011682016040523d82523d6000602084013e610d10565b606091505b5050905080610d54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4b906110b6565b60405180910390fd5b505050565b600081359050610d68816114a1565b92915050565b600081359050610d7d816114b8565b92915050565b600081359050610d92816114cf565b92915050565b600060208284031215610daa57600080fd5b6000610db884828501610d6e565b91505092915050565b60008060008060808587031215610dd757600080fd5b6000610de587828801610d6e565b9450506020610df687828801610d59565b9350506040610e0787828801610d59565b9250506060610e1887828801610d6e565b91505092959194509250565b600080600060608486031215610e3957600080fd5b6000610e4786828701610d83565b9350506020610e5886828701610d59565b9250506040610e6986828701610d59565b9150509250925092565b610e7c8161127c565b82525050565b6000610e8f6015836111e1565b9150610e9a826112de565b602082019050919050565b6000610eb26011836111e1565b9150610ebd82611307565b602082019050919050565b6000610ed56010836111e1565b9150610ee082611330565b602082019050919050565b6000610ef8600f836111e1565b9150610f0382611359565b602082019050919050565b6000610f1b603a836111e1565b9150610f2682611382565b604082019050919050565b6000610f3e601d836111e1565b9150610f49826113d1565b602082019050919050565b6000610f61600f836111e1565b9150610f6c826113fa565b602082019050919050565b6000610f846000836111d6565b9150610f8f82611423565b600082019050919050565b6000610fa76016836111e1565b9150610fb282611426565b602082019050919050565b6000610fca600f836111e1565b9150610fd58261144f565b602082019050919050565b6000610fed6011836111e1565b9150610ff882611478565b602082019050919050565b61100c81611286565b82525050565b61101b8161129d565b82525050565b600061102c82610f77565b9150819050919050565b6000602082019050818103600083015261104f81610e82565b9050919050565b6000602082019050818103600083015261106f81610ea5565b9050919050565b6000602082019050818103600083015261108f81610ec8565b9050919050565b600060208201905081810360008301526110af81610eeb565b9050919050565b600060208201905081810360008301526110cf81610f0e565b9050919050565b600060208201905081810360008301526110ef81610f31565b9050919050565b6000602082019050818103600083015261110f81610f54565b9050919050565b6000602082019050818103600083015261112f81610f9a565b9050919050565b6000602082019050818103600083015261114f81610fbd565b9050919050565b6000602082019050818103600083015261116f81610fe0565b9050919050565b600060208201905061118b6000830184611003565b92915050565b60006080820190506111a66000830187611012565b6111b36020830186610e73565b6111c06040830185610e73565b6111cd6060830184611003565b95945050505050565b600081905092915050565b600082825260208201905092915050565b60006111fd82611286565b915061120883611286565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561123d5761123c6112af565b5b828201905092915050565b600061125382611286565b915061125e83611286565b925082821015611271576112706112af565b5b828203905092915050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b60006112a882611290565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f696e76616c69642d7075626b65792d7072656669780000000000000000000000600082015250565b7f6d6f6e69746f722d69732d616374697665000000000000000000000000000000600082015250565b7f6465706f7369742d746f6f2d6c65737300000000000000000000000000000000600082015250565b7f6e6f2d737563682d6d6f6e69746f720000000000000000000000000000000000600082015250565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b7f6465706f7369742d6e6f7468696e670000000000000000000000000000000000600082015250565b50565b7f6f7574736964652d756e7374616b652d77696e646f7700000000000000000000600082015250565b7f6d6f6e69746f722d657869737465640000000000000000000000000000000000600082015250565b7f77697468647261772d746f6f2d6d756368000000000000000000000000000000600082015250565b6114aa8161127c565b81146114b557600080fd5b50565b6114c181611286565b81146114cc57600080fd5b50565b6114d881611290565b81146114e357600080fd5b5056fea264697066735822122084c731b4576861a3f4d941c5e508bc8e921c57e1db70e8e029476b477a9955be64736f6c63430008040033`)

	key, addr := testutils.GenKeyAndAddr()
	_app := testutils.CreateTestApp(key)
	defer _app.Destroy()

	tx, _, contractAddr := _app.DeployContractInBlock(key, creationBytecode)
	_app.EnsureTxSuccess(tx.Hash())

	addMonitor1 := _abi.MustPack("addMonitor",
		big.NewInt(02),
		toBytes32("pubkeyX_m1"),
		toBytes32("monitor#1"),
		big.NewInt(8001),
	)
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addMonitor1)
	_app.EnsureTxSuccess(tx.Hash())

	addMonitor2 := _abi.MustPack("addMonitor",
		big.NewInt(03),
		toBytes32("pubkeyX_m2"),
		toBytes32("monitor#2"),
		big.NewInt(8002),
	)
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addMonitor2)
	_app.EnsureTxSuccess(tx.Hash())

	addMonitor3 := _abi.MustPack("addMonitor",
		big.NewInt(02),
		toBytes32("pubkeyX_m3"),
		toBytes32("monitor#3"),
		big.NewInt(8003),
	)
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, addMonitor3)
	_app.EnsureTxSuccess(tx.Hash())

	setLastElectionTime := _abi.MustPack("setLastElectionTime", big.NewInt(223344))
	tx, _ = _app.MakeAndExecTxInBlock(key, contractAddr, 0, setLastElectionTime)
	_app.EnsureTxSuccess(tx.Hash())

	// read data from Go
	ctx := _app.GetRpcContext()
	defer ctx.Close(false)

	accInfo := ctx.GetAccount(contractAddr)
	seq := accInfo.Sequence()

	monitors := crosschain.ReadMonitorInfos(ctx, seq)
	require.Len(t, monitors, 3)
	require.Equal(t, addr, monitors[0].Addr)
	require.Equal(t, "027075626b6579585f6d3100000000000000000000000000000000000000000000",
		hex.EncodeToString(monitors[0].Pubkey))
	require.Equal(t, "monitor#1",
		strings.TrimRight(string(monitors[0].Intro), string([]byte{0})))
	require.Equal(t, uint64(8001), monitors[0].StakedAmt.Uint64())
	require.Equal(t, uint64(0), monitors[0].ElectedTime.Uint64())

	require.Equal(t, addr, monitors[1].Addr)
	require.Equal(t, "037075626b6579585f6d3200000000000000000000000000000000000000000000",
		hex.EncodeToString(monitors[1].Pubkey))
	require.Equal(t, "monitor#2",
		strings.TrimRight(string(monitors[1].Intro), string([]byte{0})))
	require.Equal(t, uint64(8002), monitors[1].StakedAmt.Uint64())
	require.Equal(t, uint64(0), monitors[1].ElectedTime.Uint64())

	require.Equal(t, addr, monitors[2].Addr)
	require.Equal(t, "027075626b6579585f6d3300000000000000000000000000000000000000000000",
		hex.EncodeToString(monitors[2].Pubkey))
	require.Equal(t, "monitor#3",
		strings.TrimRight(string(monitors[2].Intro), string([]byte{0})))
	require.Equal(t, uint64(8003), monitors[2].StakedAmt.Uint64())
	require.Equal(t, uint64(0), monitors[2].ElectedTime.Uint64())

	//operators[1].votes = 123
	//ctx2 := _app.GetRunTxContext()
	crosschain.WriteMonitorElectedTime(ctx, seq, 1, 12345)
	//ctx2.Close(true)
	monitors = crosschain.ReadMonitorInfos(ctx, seq)
	require.Equal(t, uint64(0), monitors[0].ElectedTime.Uint64())
	require.Equal(t, uint64(12345), monitors[1].ElectedTime.Uint64())
	require.Equal(t, uint64(0), monitors[2].ElectedTime.Uint64())

	lastElectionTime := crosschain.ReadMonitorsLastElectionTime(ctx, seq)
	require.Equal(t, uint64(223344), lastElectionTime.Uint64())

	crosschain.WriteMonitorsLastElectionTime(ctx, seq, 556677)
	lastElectionTime = crosschain.ReadMonitorsLastElectionTime(ctx, seq)
	require.Equal(t, uint64(556677), lastElectionTime.Uint64())
}

func toBytes32(s string) [32]byte {
	out := [32]byte{}
	copy(out[:], s)
	return out
}
